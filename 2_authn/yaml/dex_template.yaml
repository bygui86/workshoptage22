apiVersion: apps/v1
kind: Deployment
metadata:
  name: dex
  labels:
    app: dex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      serviceAccountName: dex
      containers:
      - name: dex
        image: dexidp/dex:v2.30.0
        imagePullPolicy: Always
        command:
          - "/usr/local/bin/dex"
          - "serve"
          - "/etc/dex/cfg/config.yaml"
        ports:
          - name: https
            containerPort: 5556
        volumeMounts:
          - name: config
            mountPath: /etc/dex/cfg
          - name: tls
            mountPath: /etc/dex/tls
      volumes:
        - name: config
          secret:
            secretName: dex
        - name: tls
          secret:
            secretName: dex.tls
---
apiVersion: v1
kind: Secret
metadata:
  name: dex
  labels:
    app: dex
stringData:
  config.yaml: |
    issuer: https://${DEX_HOST}

    storage:
      type: kubernetes
      config:
        inCluster: true

    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key

    connectors:
      # Log in with LDAP
      - name: LDAP
        id: ldap
        type: ldap
        config:
          redirectURI: https://${DEX_HOST}/callback
          host: ${LDAP_HOST}   # WARN: do not include http:// or https://
          insecureNoSSL: true
          insecureSkipVerify: true
          bindDN: ${LDAP_ADMIN_USER_DN}
          bindPW: ${LDAP_ADMIN_PASSWORD}
          userSearch:
            baseDN: ou=users,dc=example,dc=org
            filter: "(objectClass=posixAccount)"
            username: uid
            idAttr: uid
            emailAttr: mail
            nameAttr: uid
          groupSearch:
            baseDN: ou=users,dc=example,dc=org
            filter: "(objectClass=groupOfNames)"
            userAttr: DN
            groupAttr: member
            nameAttr: cn

    oauth2:
      skipApprovalScreen: true

    staticClients:
      - id: ${DEX_K8S_AUTH_NAME}
        redirectURIs:
          - http://${DEX_K8S_AUTH_HOST}/callback
        name: ${DEX_K8S_AUTH_NAME}
        secret: ${DEX_K8S_AUTH_SECRET}

    enablePasswordDB: true

    # Log in with Email
    staticPasswords:
      - username: "admin"
        userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
        email: "admin@dex.io"
        hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"   # INFO: bcrypt hash of the string "password"
      - username: "user1"
        userID: "1"
        email: "user1@dex.io"
        hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"   # INFO: bcrypt hash of the string "password"
      - username: "user2"
        userID: "2"
        email: "user2@dex.io"
        hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"   # INFO: bcrypt hash of the string "password"
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  labels:
    app: dex
spec:
  type: NodePort
  selector:
    app: dex
  ports:
    - name: dex
      port: 5556
      protocol: TCP
      targetPort: 5556
      nodePort: 32000
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dex
  labels:
    app: dex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
  labels:
    app: dex
rules:
  # API group created by dex
  - apiGroups: ["dex.coreos.com"]
    resources: ["*"]
    verbs: ["*"]
  # To manage its own resources, dex must be able to create customresourcedefinitions
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex
  labels:
    app: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
  - kind: ServiceAccount
    name: dex
    namespace: ${DEX_NAMESPACE}
